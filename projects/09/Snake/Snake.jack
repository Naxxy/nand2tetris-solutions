/** Implements the snake for the snake game. */
class Snake {
    field LinkedList snakeHead;
    field int screenWidth, screenHeight;
    field int snakeSize, squareSize;

    /** Constructs a new square with a given location and size. */
    constructor Snake new(int ASquareSize) {
        // Variables
        var LinkedList list;
        var Square square;

        // Initialise primitives
        let screenWidth = 512;
        let screenHeight = 256;
        let snakeSize = 3;
        let squareSize = ASquareSize;

        // Build snake body
        let square = Square.new(17, 14);
        let snakeHead = LinkedList.new(square);

        let square = Square.new(16, 14);
        do snakeHead.setNext(LinkedList.new(square));
        let list = snakeHead.next();

        let square = Square.new(15, 14);
        do list.setNext(LinkedList.new(square));

        return this;
    }

    /** Disposes this square. */
    method void dispose() {
        // Clear the memory for this object
        do snakeHead.dispose();
        do Memory.deAlloc(this);
        return;
    }

    //
    // Move the snake
    //
    method void moveLeft() {
        var LinkedList list, listParent;
        var Square square;
        var int x, y;

        // Get rid of tail
        do _disposeTail();

        // Get the (x, y) of the head
        let list = snakeHead;
        let square = list.square();
        let x = square.getGridX();
        let y = square.getGridY();

        // Add a new item to the head
        let square = Square.new(x - 1, y);
        let snakeHead = LinkedList.new(square);
        do snakeHead.setNext(list);

        return;
    }

    method void moveUp() {
        var LinkedList list, listParent;
        var Square square;
        var int x, y;

        // Get rid of tail
        do _disposeTail();

        // Get the (x, y) of the head
        let list = snakeHead;
        let square = list.square();
        let x = square.getGridX();
        let y = square.getGridY();

        // Add a new item to the head
        let square = Square.new(x, y - 1);
        let snakeHead = LinkedList.new(square);
        do snakeHead.setNext(list);

        return;
    }

    method void moveRight() {
        var LinkedList list, listParent;
        var Square square;
        var int x, y;

        // Get rid of tail
        do _disposeTail();

        // Get the (x, y) of the head
        let list = snakeHead;
        let square = list.square();
        let x = square.getGridX();
        let y = square.getGridY();

        // Add a new item to the head
        let square = Square.new(x + 1, y);
        let snakeHead = LinkedList.new(square);
        do snakeHead.setNext(list);

        return;
    }

    method void moveDown() {
        var LinkedList list, listParent;
        var Square square;
        var int x, y;

        // Get rid of tail
        do _disposeTail();

        // Get the (x, y) of the head
        let list = snakeHead;
        let square = list.square();
        let x = square.getGridX();
        let y = square.getGridY();

        // Add a new item to the head
        let square = Square.new(x, y + 1);
        let snakeHead = LinkedList.new(square);
        do snakeHead.setNext(list);

        return;
    }

    //
    // COLLISION CHECKS
    //
    method boolean canMoveLeft() {
        var LinkedList list;
        var Square square;
        var int xHead, yHead;

        // Get head (x, y) for boundary / collision check
        let square = snakeHead.square();
        let xHead = square.getGridX();
        let yHead = square.getGridY();
        let xHead = xHead - 1; // For moving left

        // Out of bounds
        if((xHead * squareSize) < 0) {
            do Output.println();
            do Output.printString("GAME OVER: Collided with left wall!");
            do Output.println();
            return false;
        }

        return ~_bodyCollision(xHead, yHead);
    }

    method boolean canMoveUp() {
        var LinkedList list;
        var Square square;
        var int xHead, yHead;

        // Get head (x, y) for boundary / collision check
        let square = snakeHead.square();
        let xHead = square.getGridX();
        let yHead = square.getGridY();
        let yHead = yHead - 1; // For moving up

        if((yHead * squareSize) < 0) {
            do Output.printString("GAME OVER: Collided with top wall!");
            do Output.println();
            return false;
        }

        return ~_bodyCollision(xHead, yHead);
    }

    method boolean canMoveRight() {
        var LinkedList list;
        var Square square;
        var int xHead, yHead;

        // Get head (x, y) for boundary / collision check
        let square = snakeHead.square();
        let xHead = square.getGridX();
        let yHead = square.getGridY();
        let xHead = xHead + 1; // For moving right

        if((xHead * squareSize) > screenWidth) {
            do Output.printString("GAME OVER: Collided with right wall!");
            do Output.println();
            return false;
        }

        return ~_bodyCollision(xHead, yHead);
    }

    method boolean canMoveDown() {
        var LinkedList list;
        var Square square;
        var int xHead, yHead;

        // Get head (x, y) for boundary / collision check
        let square = snakeHead.square();
        let xHead = square.getGridX();
        let yHead = square.getGridY();
        let yHead = yHead + 1; // For moving down

        if((yHead * squareSize) > screenHeight) {
            do Output.printString("GAME OVER: Collided with bottom wall!");
            do Output.println();
            return false;
        }

        return ~_bodyCollision(xHead, yHead);
    }

    //
    // HELPERS
    //
    method boolean _bodyCollision(int xHead, int yHead) {
        var int x, y;
        var LinkedList list;
        var Square square;

        let list = snakeHead;
        while(~(list = null)) {
            // Get body location
            let square = list.square();
            let x = square.getGridX();
            let y = square.getGridY();

            // Check body collision
            if((x = xHead) & (y = yHead)) {
                do Output.printString("Collided with body at: (");
                do Output.printInt(x);
                do Output.printString(", ");
                do Output.printInt(y);
                do Output.printString(")!");
                do Output.println();
                return true;
            }

            let list = list.next();
        }
        return false;
    }

    method void _disposeTail() {
        var LinkedList list, listParent;
        var Square square;

        // Get the last item
        let list = snakeHead;
        let listParent = snakeHead;
        while(list.hasNext()) {
            let listParent = list;
            let list = list.next();
        }

        // Dispose of the last item
        do list.dispose();
        do listParent.setNext(null);

        // Redraw tail parent to fix graphical glitch
        let square = listParent.square();
        do square.draw();

        return;
    }

    method void printSnakeHead() {
        var Square square;
        var int x, y;

        let square = snakeHead.square();
        let x = square.getGridX();
        let y = square.getGridY();
        do Output.printString("SNAKE HEAD > ");
        do Output.printString("(");
        do Output.printInt(x);
        do Output.printString(", ");
        do Output.printInt(y);
        do Output.printString(")");

        return;
    }

    method void printSnake() {
        var Square square;
        var int x, y, i;
        var LinkedList list;

        do Output.printString("SNAKE");

        let i = 0;
        let list = snakeHead;
        while(i < snakeSize) {
            let square = list.square();
            let x = square.getX();
            let y = square.getY();

            do Output.printString(" > ");
            do Output.printString("(");
            do Output.printInt(x);
            do Output.printString(", ");
            do Output.printInt(y);
            do Output.printString(")");

            // Get next
            let list = list.next();
            let i = i + 1;
        }

        return;
    }
}
