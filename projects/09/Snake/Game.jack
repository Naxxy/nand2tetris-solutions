//
// ##### TODO #####
// - PRINT GAME OVER MESSAGE ON FAILED MOVEMENT
// - WRITE METHOD FOR EATING FOOD
// - HANDLE RANDOMISING THE FOOD POSITION
//

/** Implements the Snake game logic. */
class Game {
    field int score, snakeSpeed, facing;
    field int gridWidth, gridHeight, spriteSize;
    field Snake snake;
    field Circle food;

    constructor Game new(int AGridWith, int AGridHeight, int ASpriteSize) {
        let gridWidth = AGridWith;
        let gridHeight = AGridHeight;
        let spriteSize = ASpriteSize;

        let facing = 3; // Facing right
        let snakeSpeed = 1000 / 6; // Move updates per second

        let snake = Snake.new(spriteSize);
        let food = Circle.new(2, 2, spriteSize / 2);

        let score = 0;
        do initialiseScore();

        return this;
    }

    /** Disposes this square. */
    method void dispose() {
        do snake.dispose();
        do food.dispose();

       do Memory.deAlloc(this);
       return;
    }

    //
    // --- GAME LOGIC ---
    //
    /** Runs the game: handles the user's inputs and moves the square accordingly */
    method void run() {
        var char key;  // the key currently pressed by the user
        var boolean exit;
        var int keyTick, i, newDirection;

        let exit = false;
        let keyTick = 1000 / 60; // 60 updates per second
        let newDirection = facing;

        while (~exit) {

            // Check for key press updates
            let i = snakeSpeed / keyTick;
            while((i > 0) & (~exit)) {
                // Handle key press
                let key = Keyboard.keyPressed();
                if (key = 81)  { let exit = true; }     // q key
                if (key = 130) { let newDirection = 1; }   // left arrow
                if (key = 131) { let newDirection = 2; }   // up arrow
                if (key = 132) { let newDirection = 3; }   // right arrow
                if (key = 133) { let newDirection = 4; }   // down arrow

                // Delay per loop
                do Sys.wait(keyTick);
                let i = i - 1;
            }

            // Can't move back into body
            if((newDirection = 3) & (facing = 1)) { let newDirection = facing; }
            if((newDirection = 1) & (facing = 3)) { let newDirection = facing; }
            if((newDirection = 2) & (facing = 4)) { let newDirection = facing; }
            if((newDirection = 4) & (facing = 2)) { let newDirection = facing; }

            // Handle snake movement
            let facing = newDirection;
            if(canMoveSnake()) {
                do moveSnake();
            } else {
                let exit = true;
            }
        } // while
        return;
    }
    //
    // HELPERS
    //
    /** Moves the snake in the current direction. */
    method void moveSnake() {
        if (facing = 1) { do snake.moveLeft(false); }
        if (facing = 2) { do snake.moveUp(false); }
        if (facing = 3) { do snake.moveRight(false); }
        if (facing = 4) { do snake.moveDown(false); }
        return;
    }

    method boolean canMoveSnake() {
        var boolean canMove;
        var int xHead, yHead;

        if (snake.willBodyCollide(facing)) {
            return false;
        }

        // Check still within grid
        let xHead = snake.getSnakeHeadX();
        let yHead = snake.getSnakeHeadY();
        let canMove = false;

        if (facing = 1) { let canMove = (xHead > 0); }                  // LEFT
        if (facing = 2) { let canMove = (yHead > 0); }                  // UP
        if (facing = 3) { let canMove = (xHead < gridWidth); }          // RIGHT
        if (facing = 4) { let canMove = (yHead < (gridHeight - 1)); }   // DOWN

        return canMove;
    }

    method void initialiseScore() {
        do Output.printString("SCORE: 0");
        return;
    }

    method void updateScore(int value) {
        var int i;

        let i = score;
        if(i = 0) {
            do Output.backSpace(); // Special case
        }
        while(i > 0) {
            do Output.backSpace();
            let i = i / 10;
        }

        let score = score + value;
        do Output.printInt(score);

        return;
    }
}
