// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */


 CHIP CPU {

     IN  inM[16],         // M value input  (M = contents of RAM[A])
         instruction[16], // Instruction for execution
         reset;           // Signals whether to re-start the current
                          // program (reset==1) or continue executing
                          // the current program (reset==0).

     OUT outM[16],        // M value output
         writeM,          // Write to M?
         addressM[15],    // Address in data memory (of M)
         pc[15];          // address of next instruction

     PARTS:

        // Instruction type
        Not(in=instruction[15], out=AInstruction);
        Not(in=AInstruction, out=CInstruction);

        // RegisterA
        Mux16(a=instruction, b=ALUout, sel=CInstruction, out=Ain); // C-inst or A-inst input
        Or(a=AInstruction, b=instruction[5], out=loadA); // A-inst or C-inst and dest=A
        ARegister(in=Ain, load=loadA, out=Aout, out[0..14]=addressM);

        // RegisterD
        And(a=CInstruction, b=instruction[4], out=loadD);
        DRegister(in=ALUout, load=loadD, out=Dout);

        // ALU Preparation
        Mux16(a=Aout,b=inM,sel=instruction[12],out=AMout);

        //Prepare for ALU, if it is not an instruction, just return D
        //And(b=instruction[11],b=instruction[15],out=zx);//c1
        //And(b=instruction[10],b=instruction[15],out=nx);//c2
        //Or(b=instruction[9],b=notinstruction,out=zy);//c3
        //Or(b=instruction[8],b=notinstruction,out=ny);//c4
        //And(b=instruction[7],b=instruction[15],out=f);//c5
        //And(b=instruction[6],b=instruction[15],out=no);//c6

        And(a=CInstruction, b=instruction[11], out=zx);
        And(a=CInstruction, b=instruction[10], out=nx);
        And(a=CInstruction, b=instruction[9], out=zy);
        And(a=CInstruction, b=instruction[8], out=ny);
        And(a=CInstruction, b=instruction[7], out=f);
        And(a=CInstruction, b=instruction[6], out=no);

        ALU(
            x=Dout, y=AMout,
            zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no,
            out=outM, out=ALUout, zr=zero, ng=neg
        );

        // C-inst and dest=M
        And(a=CInstruction, b=instruction[3], out=writeM);


        // Jump
        Or(a=zero, b=neg, out=notpos);
        Not(in=notpos, out=pos);

        And(a=CInstruction, b=instruction[0], out=jgt);
        And(a=CInstruction, b=instruction[1], out=jeq);
        And(a=CInstruction, b=instruction[2], out=jlt);

        And(a=jgt, b=pos, out=j3);
        And(a=jeq, b=zero, out=j2);
        And(a=jlt, b=neg, out=j1);

        Or(a=j1, b=j2, out=j12);
        Or(a=j12, b=j3, out=jump);

        // PC
        PC(in=Aout, load=jump, reset=reset, inc=true, out[0..14]=pc);
}
